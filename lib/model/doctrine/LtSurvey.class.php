<?php

/**
 * LtSurvey
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    LexLists
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class LtSurvey extends BaseLtSurvey {

    /**
     *  Frequency types
     */
    const FREQUENCY_ANNUAL      = 1;
    const FREQUENCY_SEMI_ANNUAL = 2;
    const FREQUENCY_QUARTERLY   = 3;
    const FREQUENCY_BI_ANNUAL   = 4;
    const FREQUENCY_RANDOM      = 5;

    /**
     *  Array with frequency types
     */
    public static $frequency_types_array = array(
        self::FREQUENCY_ANNUAL      => "Annual",
        self::FREQUENCY_SEMI_ANNUAL => "Semi-annual",
        self::FREQUENCY_QUARTERLY   => "Quarterly",
        self::FREQUENCY_BI_ANNUAL   => "Bi-annual",
        self::FREQUENCY_RANDOM      => "Random",
    );

    /**
     *  Candidate types
     */
    const CANDIDATE_INDIVIDUAL                 = 1;
    const CANDIDATE_PRACTICE_GROUP             = 2;
    const CANDIDATE_FIRM                       = 3;
    const CANDIDATE_CORPORATE_LEGAL_DEPARTMENT = 4;
    const CANDIDATE_GOVERNMENT                 = 5;
    const CANDIDATE_PUBLIC_SECTOR              = 6;

    /**
     *  Array with candidate types
     */
    public static $candidate_types_array = array(
        self::CANDIDATE_INDIVIDUAL                 => "Individual",
        self::CANDIDATE_PRACTICE_GROUP             => "Practice group",
        self::CANDIDATE_FIRM                       => "Firm",
        self::CANDIDATE_CORPORATE_LEGAL_DEPARTMENT => "Corporate legal department",
        self::CANDIDATE_GOVERNMENT                 => "Government",
        self::CANDIDATE_PUBLIC_SECTOR              => "Public sector",
    );

    public function setSubmissionDeadline($value) {
        if ($value == '') {
            return $this->submission_deadline = null;
        }

        return $this->_set('submission_deadline', date("Y-m-d", strtotime($value)));
    }

    public function getSubmissionDeadline() {
        if (!is_null($this->_get('submission_deadline'))) {
            return date("d-M-Y", strtotime($this->_get('submission_deadline')));
        }

        return $this->_get('submission_deadline');
    }

    public function getCreatedAt() {
        if (!is_null($this->_get('created_at'))) {
            return date("d-M-Y", strtotime($this->_get('created_at')));
        }

        return $this->_get('created_at');
    }

    public function getUpdatedAt() {
        if (!is_null($this->_get('updated_at'))) {
            return date("d-M-Y", strtotime($this->_get('updated_at')));
        }

        return $this->_get('updated_at');
    }

    /**
     * Get nomination with links
     * 
     * @return string
     */
    public function getNominationWithLinks() {
        if (!is_null($this->_get('nomination'))) {
            // Define regular expression
            $regexp = "/((?:(http|https|Http|Https|rtsp|Rtsp):\/\/(?:(?:[a-zA-Z0-9\$\-\_\.\+\!\*\'\(\)\,\;\?\&\=]|(?:\%[a-fA-F0-9]{2})){1,64}(?:\:(?:[a-zA-Z0-9\$\-\_\.\+\!\*\'\(\)\,\;\?\&\=]|(?:\%[a-fA-F0-9]{2})){1,25})?\@)?)?((?:(?:[a-zA-Z0-9][a-zA-Z0-9\-]{0,64}\.)+(?:(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])|(?:biz|b[abdefghijmnorstvwyz])|(?:cat|com|coop|c[acdfghiklmnoruvxyz])|d[ejkmoz]|(?:edu|e[cegrstu])|f[ijkmor]|(?:gov|g[abdefghilmnpqrstuwy])|h[kmnrtu]|(?:info|int|i[delmnoqrst])|(?:jobs|j[emop])|k[eghimnrwyz]|l[abcikrstuvy]|(?:mil|mobi|museum|m[acdghklmnopqrstuvwxyz])|(?:name|net|n[acefgilopruz])|(?:org|om)|(?:pro|p[aefghklmnrstwy])|qa|r[eouw]|s[abcdeghijklmnortuvyz]|(?:tel|travel|t[cdfghjklmnoprtvwz])|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]))|(?:(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[0-9])))(?:\:\d{1,5})?)(\/(?:(?:[a-zA-Z0-9\;\/\?\:\@\&\=\#\~\-\.\+\!\*\'\(\)\,\_])|(?:\%[a-fA-F0-9]{2}))*)?(?:\b|$)/i";

            // Find all URLs
            preg_match_all($regexp, $this->_get('nomination'), $result, PREG_PATTERN_ORDER);
            if (isset($result[0])) {
                // Replace all URLs to links
                $nomination = $this->_get('nomination');
                foreach ($result[0] as $match) {
                    $http_prefix = "";
                    if (strpos($match, "http") === FALSE && strpos($match, "https") === FALSE) {
                        $http_prefix = "http://";
                    }

                    $nomination = str_replace($match, "<a href='" . $http_prefix . $match . "' class='custom_link' target='_blank'>" . $match . "</a>", $nomination);
                }
            }

            return $nomination;
        }

        return $this->_get('nomination');
    }
    
    /**
     * Get short eligibility criteria
     * 
     * @return string
     */
    public function getShortEligibilityCriteria() {
        if(strlen($this->_get('eligibility_criteria')) > 70) {
            return substr($this->_get('eligibility_criteria'), 0, 70) . " ...";
        } else {
            return $this->_get('eligibility_criteria');
        }
    }
    
    /**
     * Get short survey description
     * 
     * @return string
     */
    public function getShortSurveyDescription() {
        if(strlen($this->_get('survey_description')) > 70) {
            return substr($this->_get('survey_description'), 0, 70) . " ...";
        } else {
            return $this->_get('survey_description');
        }
    }
    
    /**
     * Get short selection methodology
     * 
     * @return string
     */
    public function getShortSelectionMethodology() {
        if(strlen($this->_get('selection_methodology')) > 70) {
            return substr($this->_get('selection_methodology'), 0, 70) . " ...";
        } else {
            return $this->_get('selection_methodology');
        }
    }

}
