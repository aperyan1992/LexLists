<?php

/**
 * BaseLtSurvey
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $organization_id
 * @property string $organization_url
 * @property string $survey_name
 * @property integer $year
 * @property string $survey_url
 * @property integer $frequency
 * @property date $submission_deadline
 * @property integer $survey_region_id
 * @property string $survey_description
 * @property integer $candidate_type
 * @property string $eligibility_criteria
 * @property string $nomination
 * @property string $selection_methodology
 * @property boolean $self_nomination
 * @property boolean $fees
 * @property boolean $pay_for_play
 * @property integer $survey_contact_id
 * @property string $survey_notes
 * @property string $staff_notes
 * @property LtSurveyContact $Contact
 * @property LtOrganization $Organization
 * @property Doctrine_Collection $Cities
 * @property LtRegion $Region
 * @property Doctrine_Collection $States
 * @property Doctrine_Collection $Countries
 * @property Doctrine_Collection $SpecialCriterias
 * @property Doctrine_Collection $PracticeAreas
 * @property Doctrine_Collection $LtSurveyPracticeArea
 * @property Doctrine_Collection $LtSurveySpecialCriteria
 * @property Doctrine_Collection $LtSurveyCity
 * @property Doctrine_Collection $LtSurveyState
 * @property Doctrine_Collection $LtSurveyCountry
 * @property Doctrine_Collection $LtMySurvey
 * @property Doctrine_Collection $LtMySurveyNote
 * 
 * @method integer             getOrganizationId()          Returns the current record's "organization_id" value
 * @method string              getOrganizationUrl()         Returns the current record's "organization_url" value
 * @method string              getSurveyName()              Returns the current record's "survey_name" value
 * @method integer             getYear()                    Returns the current record's "year" value
 * @method string              getSurveyUrl()               Returns the current record's "survey_url" value
 * @method integer             getFrequency()               Returns the current record's "frequency" value
 * @method date                getSubmissionDeadline()      Returns the current record's "submission_deadline" value
 * @method integer             getSurveyRegionId()          Returns the current record's "survey_region_id" value
 * @method string              getSurveyDescription()       Returns the current record's "survey_description" value
 * @method integer             getCandidateType()           Returns the current record's "candidate_type" value
 * @method string              getEligibilityCriteria()     Returns the current record's "eligibility_criteria" value
 * @method string              getNomination()              Returns the current record's "nomination" value
 * @method string              getSelectionMethodology()    Returns the current record's "selection_methodology" value
 * @method boolean             getSelfNomination()          Returns the current record's "self_nomination" value
 * @method boolean             getFees()                    Returns the current record's "fees" value
 * @method boolean             getPayForPlay()              Returns the current record's "pay_for_play" value
 * @method integer             getSurveyContactId()         Returns the current record's "survey_contact_id" value
 * @method string              getSurveyNotes()             Returns the current record's "survey_notes" value
 * @method string              getStaffNotes()              Returns the current record's "staff_notes" value
 * @method LtSurveyContact     getContact()                 Returns the current record's "Contact" value
 * @method LtOrganization      getOrganization()            Returns the current record's "Organization" value
 * @method Doctrine_Collection getCities()                  Returns the current record's "Cities" collection
 * @method LtRegion            getRegion()                  Returns the current record's "Region" value
 * @method Doctrine_Collection getStates()                  Returns the current record's "States" collection
 * @method Doctrine_Collection getCountries()               Returns the current record's "Countries" collection
 * @method Doctrine_Collection getSpecialCriterias()        Returns the current record's "SpecialCriterias" collection
 * @method Doctrine_Collection getPracticeAreas()           Returns the current record's "PracticeAreas" collection
 * @method Doctrine_Collection getLtSurveyPracticeArea()    Returns the current record's "LtSurveyPracticeArea" collection
 * @method Doctrine_Collection getLtSurveySpecialCriteria() Returns the current record's "LtSurveySpecialCriteria" collection
 * @method Doctrine_Collection getLtSurveyCity()            Returns the current record's "LtSurveyCity" collection
 * @method Doctrine_Collection getLtSurveyState()           Returns the current record's "LtSurveyState" collection
 * @method Doctrine_Collection getLtSurveyCountry()         Returns the current record's "LtSurveyCountry" collection
 * @method Doctrine_Collection getLtMySurvey()              Returns the current record's "LtMySurvey" collection
 * @method Doctrine_Collection getLtMySurveyNote()          Returns the current record's "LtMySurveyNote" collection
 * @method LtSurvey            setOrganizationId()          Sets the current record's "organization_id" value
 * @method LtSurvey            setOrganizationUrl()         Sets the current record's "organization_url" value
 * @method LtSurvey            setSurveyName()              Sets the current record's "survey_name" value
 * @method LtSurvey            setYear()                    Sets the current record's "year" value
 * @method LtSurvey            setSurveyUrl()               Sets the current record's "survey_url" value
 * @method LtSurvey            setFrequency()               Sets the current record's "frequency" value
 * @method LtSurvey            setSubmissionDeadline()      Sets the current record's "submission_deadline" value
 * @method LtSurvey            setSurveyRegionId()          Sets the current record's "survey_region_id" value
 * @method LtSurvey            setSurveyDescription()       Sets the current record's "survey_description" value
 * @method LtSurvey            setCandidateType()           Sets the current record's "candidate_type" value
 * @method LtSurvey            setEligibilityCriteria()     Sets the current record's "eligibility_criteria" value
 * @method LtSurvey            setNomination()              Sets the current record's "nomination" value
 * @method LtSurvey            setSelectionMethodology()    Sets the current record's "selection_methodology" value
 * @method LtSurvey            setSelfNomination()          Sets the current record's "self_nomination" value
 * @method LtSurvey            setFees()                    Sets the current record's "fees" value
 * @method LtSurvey            setPayForPlay()              Sets the current record's "pay_for_play" value
 * @method LtSurvey            setSurveyContactId()         Sets the current record's "survey_contact_id" value
 * @method LtSurvey            setSurveyNotes()             Sets the current record's "survey_notes" value
 * @method LtSurvey            setStaffNotes()              Sets the current record's "staff_notes" value
 * @method LtSurvey            setContact()                 Sets the current record's "Contact" value
 * @method LtSurvey            setOrganization()            Sets the current record's "Organization" value
 * @method LtSurvey            setCities()                  Sets the current record's "Cities" collection
 * @method LtSurvey            setRegion()                  Sets the current record's "Region" value
 * @method LtSurvey            setStates()                  Sets the current record's "States" collection
 * @method LtSurvey            setCountries()               Sets the current record's "Countries" collection
 * @method LtSurvey            setSpecialCriterias()        Sets the current record's "SpecialCriterias" collection
 * @method LtSurvey            setPracticeAreas()           Sets the current record's "PracticeAreas" collection
 * @method LtSurvey            setLtSurveyPracticeArea()    Sets the current record's "LtSurveyPracticeArea" collection
 * @method LtSurvey            setLtSurveySpecialCriteria() Sets the current record's "LtSurveySpecialCriteria" collection
 * @method LtSurvey            setLtSurveyCity()            Sets the current record's "LtSurveyCity" collection
 * @method LtSurvey            setLtSurveyState()           Sets the current record's "LtSurveyState" collection
 * @method LtSurvey            setLtSurveyCountry()         Sets the current record's "LtSurveyCountry" collection
 * @method LtSurvey            setLtMySurvey()              Sets the current record's "LtMySurvey" collection
 * @method LtSurvey            setLtMySurveyNote()          Sets the current record's "LtMySurveyNote" collection
 * 
 * @package    LexLists
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLtSurvey extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('surveys');
        $this->hasColumn('organization_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('organization_url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('survey_name', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('year', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('survey_url', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('frequency', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('submission_deadline', 'date', null, array(
             'type' => 'date',
             'notnull' => false,
             ));
        $this->hasColumn('survey_region_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('survey_description', 'string', 5000, array(
             'type' => 'string',
             'length' => 5000,
             ));
        $this->hasColumn('candidate_type', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('eligibility_criteria', 'string', 5000, array(
             'type' => 'string',
             'length' => 5000,
             ));
        $this->hasColumn('nomination', 'string', 5000, array(
             'type' => 'string',
             'length' => 5000,
             ));
        $this->hasColumn('selection_methodology', 'string', 5000, array(
             'type' => 'string',
             'length' => 5000,
             ));
        $this->hasColumn('self_nomination', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => false,
             ));
        $this->hasColumn('fees', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => false,
             ));
        $this->hasColumn('pay_for_play', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => false,
             ));
        $this->hasColumn('survey_contact_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('survey_notes', 'string', 5000, array(
             'type' => 'string',
             'length' => 5000,
             ));
        $this->hasColumn('staff_notes', 'string', 5000, array(
             'type' => 'string',
             'length' => 5000,
             ));

        $this->option('type', 'InnoDB');
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('LtSurveyContact as Contact', array(
             'local' => 'survey_contact_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('LtOrganization as Organization', array(
             'local' => 'organization_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('LtCity as Cities', array(
             'refClass' => 'LtSurveyCity',
             'local' => 'survey_id',
             'foreign' => 'city_id'));

        $this->hasOne('LtRegion as Region', array(
             'local' => 'survey_region_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('LtState as States', array(
             'refClass' => 'LtSurveyState',
             'local' => 'survey_id',
             'foreign' => 'state_id'));

        $this->hasMany('LtCountry as Countries', array(
             'refClass' => 'LtSurveyCountry',
             'local' => 'survey_id',
             'foreign' => 'country_id'));

        $this->hasMany('LtSpecialCriteria as SpecialCriterias', array(
             'refClass' => 'LtSurveySpecialCriteria',
             'local' => 'survey_id',
             'foreign' => 'special_criteria_id'));

        $this->hasMany('LtPracticeArea as PracticeAreas', array(
             'refClass' => 'LtSurveyPracticeArea',
             'local' => 'survey_id',
             'foreign' => 'practice_area_id'));

        $this->hasMany('LtSurveyPracticeArea', array(
             'local' => 'id',
             'foreign' => 'survey_id'));

        $this->hasMany('LtSurveySpecialCriteria', array(
             'local' => 'id',
             'foreign' => 'survey_id'));

        $this->hasMany('LtSurveyCity', array(
             'local' => 'id',
             'foreign' => 'survey_id'));

        $this->hasMany('LtSurveyState', array(
             'local' => 'id',
             'foreign' => 'survey_id'));

        $this->hasMany('LtSurveyCountry', array(
             'local' => 'id',
             'foreign' => 'survey_id'));

        $this->hasMany('LtMySurvey', array(
             'local' => 'id',
             'foreign' => 'survey_id'));

        $this->hasMany('LtMySurveyNote', array(
             'local' => 'id',
             'foreign' => 'survey_id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}